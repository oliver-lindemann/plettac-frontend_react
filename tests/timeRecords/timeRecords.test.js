// Generated by CodiumAI

import dayjs from "dayjs";
import { getTimeRecordSums } from "../../src/features/timeRecords/overview/timeTable/utils/TimeRecordCalculation";
import { TYPES } from "../../src/config/timeRecords";
import { DEFAULT_WORKING_TIME, WORKING_TIME_LAGER } from "../../src/config/timeTracking";
import { dayjsUTC } from "../../src/utils/DateUtils";

/*
Code Analysis

Objective:
- The objective of the getTimeRecordSums function is to calculate and return the total time worked by a user for a given time record, taking into account deviations and different types of work.

Inputs:
- The function takes in two parameters: userId, which is the ID of the user for whom the time worked is being calculated, and timeRecord, which is the time record object containing the entries for the user.

Flow:
- The function first checks if the inputs are valid, and returns an empty object if they are not.
- It then calls the getTimeRecordsWithDeviationsApplied function to get the time record entries with deviations applied.
- The function then calculates the total time worked for each type of work (AZ, FAZ-FA, FAZ-BF) using the filtered time record entries.
- Finally, it calculates the total time worked for the day by summing up the time worked for each type of work, and returns an object containing the individual and total time worked.

Outputs:
- The function returns an object containing the total time worked for the day (sum), as well as the time worked for each type of work (az, faz_fa, faz_bfa).

Additional aspects:
- The function uses the getTimeRecordsWithDeviationsApplied function to apply deviations to the time record entries before calculating the time worked.
- The function filters out FAZ entries for the user when calculating the time worked for AZ and FAZ-FA, and only includes FAZ entries for other users when calculating the time worked for FAZ-BF.
- The function subtracts 60 minutes from the total time worked for AZ to account for the lunch break.
*/

const testUser = {
    _id: '123',
    timeTracking: WORKING_TIME_LAGER
}

describe('getTimeRecordSums_function', () => {

    // Tests that getTimeRecordSums returns the correct sums for valid userId and timeRecord with entries.
    it("test_getTimeRecordSums_valid_input", () => {
        const timeRecord = {
            entries: [
                {
                    user: "123",
                    type: TYPES.HOF,
                    startTime: dayjs("2022-01-01T08:00:00.000Z"),
                    endTime: dayjs("2022-01-01T16:00:00.000Z")
                },
                {
                    user: "123",
                    type: TYPES.BST,
                    startTime: dayjs("2022-01-01T16:00:00.000Z"),
                    endTime: dayjs("2022-01-01T20:00:00.000Z")
                }
            ]
        };

        // Exptected: 12 Hours - 1 Hour Break => 11 Hours = 660 Minutes

        const expectedSums = {
            az: 720,
            break: 60,
            faz: 0,
            isDriver: false,
            sum: 660
        };
        const actualSums = getTimeRecordSums(testUser, timeRecord);
        expect(actualSums).toEqual(expectedSums);
    });

    // Tests that getTimeRecordSums returns the correct sums for valid userId and timeRecord with entries.
    it("test_getTimeRecordSums_valid_input_break_time_friday", () => {
        const timeRecord = {
            date: dayjs("2022-01-07T02:00:00.000Z"),
            entries: [
                {
                    user: "123",
                    type: TYPES.HOF,
                    startTime: dayjs("2022-01-07T08:00:00.000Z"),
                    endTime: dayjs("2022-01-07T16:00:00.000Z")
                },
                {
                    user: "123",
                    type: TYPES.BST,
                    startTime: dayjs("2022-01-07T16:00:00.000Z"),
                    endTime: dayjs("2022-01-07T20:00:00.000Z")
                }
            ]
        };

        const testBreakTime = 0.5;
        testUser.timeTracking.winter.breakTimes[4] = testBreakTime;

        const expectedSums = {
            az: 720,
            break: testBreakTime * 60,
            faz: 0,
            isDriver: false,
            sum: 690
        };
        const actualSums = getTimeRecordSums(testUser, timeRecord);
        expect(actualSums).toEqual(expectedSums);
    });

    // Tests that getTimeRecordSums returns the correct sums for valid userId and timeRecord with entries.
    it("test_getTimeRecordSums_no_break_time_only_faz_driver", () => {
        const timeRecord = {
            entries: [
                {
                    user: "123",
                    type: TYPES.FAZ,
                    driver: '123',
                    startTime: dayjs("2022-01-01T08:00:00.000Z"),
                    endTime: dayjs("2022-01-01T16:00:00.000Z")
                },
                {
                    user: "123",
                    type: TYPES.FAZ,
                    driver: '123',
                    startTime: dayjs("2022-01-01T16:00:00.000Z"),
                    endTime: dayjs("2022-01-01T20:00:00.000Z")
                }
            ]
        };

        // Exptected: 12 Hours with no Hour Break => 12 Hours = 720 Minutes

        const expectedSums = {
            az: 0,
            break: 60,
            faz: 720,
            isDriver: true,
            sum: 720
        };
        const actualSums = getTimeRecordSums(testUser, timeRecord);
        expect(actualSums).toEqual(expectedSums);
    });

    // Tests that getTimeRecordSums returns the correct sums for valid userId and timeRecord with entries.
    it("test_getTimeRecordSums_no_break_time_only_faz_driver_partial", () => {
        const timeRecord = {
            entries: [
                {
                    user: "123",
                    type: TYPES.FAZ,
                    driver: '123',
                    startTime: dayjs("2022-01-01T08:00:00.000Z"),
                    endTime: dayjs("2022-01-01T16:00:00.000Z")
                },
                {
                    user: "123",
                    type: TYPES.FAZ,
                    driver: '456',
                    startTime: dayjs("2022-01-01T16:00:00.000Z"),
                    endTime: dayjs("2022-01-01T20:00:00.000Z")
                }
            ]
        };

        // Exptected: 12 Hours with no Hour Break => 12 Hours = 720 Minutes

        const expectedSums = {
            az: 0,
            break: 60,
            faz: 720,
            isDriver: true,
            sum: 720
        };
        const actualSums = getTimeRecordSums(testUser, timeRecord);
        expect(actualSums).toEqual(expectedSums);
    });

    // Tests that getTimeRecordSums returns the correct sums for valid userId and timeRecord with entries.
    it("test_getTimeRecordSums_no_break_time_only_faz_not_driver", () => {
        const timeRecord = {
            entries: [
                {
                    user: "123",
                    type: TYPES.FAZ,
                    driver: '456',
                    startTime: dayjs("2022-01-01T08:00:00.000Z"),
                    endTime: dayjs("2022-01-01T16:00:00.000Z")
                },
                {
                    user: "123",
                    type: TYPES.FAZ,
                    driver: '456',
                    startTime: dayjs("2022-01-01T16:00:00.000Z"),
                    endTime: dayjs("2022-01-01T20:00:00.000Z")
                }
            ]
        };

        // Exptected: 12 Hours with no Hour Break => 12 Hours = 720 Minutes

        const expectedSums = {
            az: 0,
            break: 60,
            faz: 360,
            isDriver: false,
            sum: 360
        };
        const actualSums = getTimeRecordSums(testUser, timeRecord);
        expect(actualSums).toEqual(expectedSums);
    });

    // Tests that getTimeRecordSums returns an empty object when userId is missing.
    it("test_getTimeRecordSums_missing_userId", () => {
        const timeRecord = {
            entries: [
                {
                    user: "123",
                    type: TYPES.HOF,
                    startTime: dayjs("2022-01-01T08:00:00.000Z"),
                    endTime: dayjs("2022-01-01T16:00:00.000Z")
                },
                {
                    user: "123",
                    type: TYPES.BST,
                    startTime: dayjs("2022-01-01T16:00:00.000Z"),
                    endTime: dayjs("2022-01-01T20:00:00.000Z")
                }
            ]
        };
        const expectedSums = {};
        const actualSums = getTimeRecordSums(null, timeRecord);
        expect(actualSums).toEqual(expectedSums);
    });

    // Tests that getTimeRecordSums returns an empty object when timeRecord is missing.
    it("test_getTimeRecordSums_missing_timeRecord", () => {
        const expectedSums = {};
        const actualSums = getTimeRecordSums(testUser, null);
        expect(actualSums).toEqual(expectedSums);
    });

    // Tests that getTimeRecordSums applies deviations to timeRecord entries before calculating sums.
    it("test_getTimeRecordSums_deviation_applied", () => {
        const timeRecord = {
            user: "123",
            entries: [
                {
                    user: "123",
                    type: TYPES.HOF,
                    startTime: dayjs("2022-01-01T08:00:00.000Z"),
                    endTime: dayjs("2022-01-01T16:00:00.000Z")
                },
                {
                    user: "123",
                    type: TYPES.BST,
                    startTime: dayjs("2022-01-01T16:00:00.000Z"),
                    endTime: dayjs("2022-01-01T20:00:00.000Z")
                }
            ],
            deviations: [
                {
                    user: "123",
                    startTime: dayjs("2022-01-01T10:00:00.000Z"),
                    endTime: dayjs("2022-01-01T18:00:00.000Z")
                }
            ]
        };

        // Exptected: 10 - 18 o'Clock => 8 Hours - 1 Hour Break => 7 Hours = 420 Minutes

        const expectedSums = {
            az: 480,
            break: 60,
            faz: 0,
            isDriver: false,
            sum: 420
        };
        const actualSums = getTimeRecordSums(testUser, timeRecord);
        expect(actualSums).toEqual(expectedSums);
    });

    // Tests that getTimeRecordSums applies deviations to timeRecord entries before calculating sums.
    it("test_getTimeRecordSums_deviation_startTime_only_applied", () => {
        const timeRecord = {
            user: "123",
            entries: [
                {
                    user: "123",
                    type: TYPES.HOF,
                    startTime: dayjs("2022-01-01T08:00:00.000Z"),
                    endTime: dayjs("2022-01-01T16:00:00.000Z")
                },
                {
                    user: "123",
                    type: TYPES.BST,
                    startTime: dayjs("2022-01-01T16:00:00.000Z"),
                    endTime: dayjs("2022-01-01T20:00:00.000Z")
                }
            ],
            deviations: [
                {
                    user: "123",
                    startTime: dayjs("2022-01-01T10:00:00.000Z"),
                }
            ]
        };

        // Exptected: 10 - 18 o'Clock => 8 Hours - 1 Hour Break => 7 Hours = 420 Minutes

        const expectedSums = {
            az: 600,
            break: 60,
            faz: 0,
            isDriver: false,
            sum: 540
        };
        const actualSums = getTimeRecordSums(testUser, timeRecord);
        expect(actualSums).toEqual(expectedSums);
    });

    // Tests that getTimeRecordSums applies deviations to timeRecord entries before calculating sums.
    it("test_getTimeRecordSums_deviation_endTime_only_applied", () => {
        const timeRecord = {
            user: "123",
            entries: [
                {
                    user: "123",
                    type: TYPES.HOF,
                    startTime: dayjs("2022-01-01T08:00:00.000Z"),
                    endTime: dayjs("2022-01-01T16:00:00.000Z")
                },
                {
                    user: "123",
                    type: TYPES.BST,
                    startTime: dayjs("2022-01-01T16:00:00.000Z"),
                    endTime: dayjs("2022-01-01T20:00:00.000Z")
                }
            ],
            deviations: [
                {
                    user: "123",
                    endTime: dayjs("2022-01-01T18:00:00.000Z")
                }
            ]
        };

        // Exptected: 10 - 18 o'Clock => 8 Hours - 1 Hour Break => 7 Hours = 420 Minutes

        const expectedSums = {
            az: 600,
            break: 60,
            faz: 0,
            isDriver: false,
            sum: 540
        };
        const actualSums = getTimeRecordSums(testUser, timeRecord);
        expect(actualSums).toEqual(expectedSums);
    });

    // Tests that getTimeRecordSums returns an empty object when timeRecord entries are missing.
    it("test_getTimeRecordSums_missing_entries", () => {
        const timeRecord = {};
        const expectedSums = {};
        const actualSums = getTimeRecordSums(testUser, timeRecord);
        expect(actualSums).toEqual(expectedSums);
    });

    // Tests that getTimeRecordSums returns the correct sums when timeRecord entries array is empty.
    it("test_getTimeRecordSums_empty_entries", () => {
        const timeRecord = {
            entries: []
        };
        const expectedSums = {
            az: 0,
            break: 60,
            faz: 0,
            isDriver: false,
            sum: 0
        };
        const actualSums = getTimeRecordSums(testUser, timeRecord);
        expect(actualSums).toEqual(expectedSums);
    });
});
